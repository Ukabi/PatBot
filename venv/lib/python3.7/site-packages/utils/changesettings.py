from redbot.core import commands as cmd
from discord import Embed
from utils.imports import TextChannelConverter, COLOR

async def change_channel(ctx: cmd.Context, channel, config):
    channel = await TextChannelConverter().convert_(ctx, channel)

    if channel is None:
        embed = Embed(
            title="Error",
            color=COLOR,
            description="Channel reference not found."
        )
    else:
        await config.set(channel.id)
        embed = Embed(
            title="Channel changed",
            color=COLOR,
            description=str(channel)
        )

    await ctx.send(embed=embed)

async def change_data(self, ctx: cmd.Context, text, change_type):
    text = text.replace("\\n", "\n")

    try:
        embed = Embed(
            title="Message changed - example:",
            color=COLOR,
            description=text.format(ctx.author)
        )
        await change_type.set(text)

    except AttributeError:
        embed = Embed(
            title="Error",
            color=COLOR,
            description="Wrong attribute."
        )
    except IndexError:
        embed = Embed(
            title="Error",
            color=COLOR,
            description="Wrong format."
        )

    finally:
        await ctx.send(embed=embed)
    
async def check_message(reaction: Reaction, member: Member):
    message = await self.config.guild(reaction.message.guild).message()
    return (reaction.message.id == message and member.id != self.bot.id)

async def edit_role_list(reaction: Reaction, member: Member, change_type, config):
    if await self.check_message(reaction, member):
        associations = await self.config.guild(member.guild).associations()
        match = [asso for asso in associations if asso[0] == str(reaction.emoji)]

        if match:
            asso = match[0]
            role = member.guild.get_role(asso[1])

            if role is None:
                print(
                    "ROLE_ATTRIBUTION_ERROR: "
                    "role {} doesn't exist anymore.".format(asso[1])
                )
            else:
                if change_type is 'r':
                    roles = [r for r in member.roles if r != role]
                else:
                    roles = list(member.roles) + [role]
                
                await member.edit(roles=roles)
        
        else:
            print(
                "WRONG_REACTION: "
                "{} not in assosiation list.".format(str(reaction.emoji))
            )