from redbot.core import commands as cmd
from threading import Timer
import re

COLOR = 0xF495BF

try:
    # UCS-4
    EMOJI_REG = re.compile(u'([\U00002600-\U000027BF])|([\U0001f300-\U0001f64F])|([\U0001f680-\U0001f6FF])')
except re.error:
    # UCS-2
    EMOJI_REG = re.compile(u'([\u2600-\u27BF])|([\uD83C][\uDF00-\uDFFF])|([\uD83D][\uDC00-\uDE4F])|([\uD83D][\uDE80-\uDEFF])')

class RoleConverter(cmd.RoleConverter):
    def __init__(self):
        super(self.__class__, self).__init__()

    async def convert_(self, ctx: cmd.Context, argument: str):
        try:
            return await self.convert(ctx, argument)
        except:
            return None


class EmojiConverter(cmd.EmojiConverter):
    def __init__(self):
        super(self.__class__, self).__init__()

    async def convert_(self, ctx: cmd.Context, argument: str):
        try:
            return await self.convert(ctx, argument)
        except:
            if len(argument) < 2:
                return argument
            else:
                return None

class TextChannelConverter(cmd.TextChannelConverter):
    def __init__(self):
        super(self.__class__, self).__init__()

    async def convert_(self, ctx: cmd.Context, argument: str):
        try:
            return await self.convert(ctx, argument)
        except:
            return None

class MemberConverter(cmd.MemberConverter):
    def __init__(self):
        super(self.__class__, self).__init__()

    async def convert_(self, ctx: cmd.Context, argument: str):
        try:
            return await self.convert(ctx, argument)
        except:
            return None

async def ask_confirm(**kwargs):
    ctx = kwargs.pop('ctx', None)
    bot = kwargs.pop('bot', None)
    pic = kwargs.pop('pic', None)
    conf_mess = kwargs.pop('conf_mess', "No message set.")

    def check(m):
        if m.channel != ctx.channel or m.author != ctx.message.author:
            return False
        elif m.content.lower()[0] not in "yn":
            return False
        else:
            return True

    embed = Embed(
        title="Confirm?",
        color=COLOR,
        description=conf_mess
    )

    await ctx.send(file=pic, embed=embed)

    confirm = await bot.wait_for('message', check=check)

    return bool(confirm.content.lower().startswith("y"))